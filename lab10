lab-10
------
problem - 1:
------------

#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;
int nodeCount, edgeCount;

void dijkstra(int src, vector<vector<int>>G[1005], int dist[])
{
    priority_queue<pii, vector<pii>, greater<pii> >pq;
    pq.push({0, src});
    dist[src] =0;
    while(!pq.empty())
    {
        int u = pq.top().second;
        pq.pop();
        
        int sz = G[u].size();
        for(auto v: G[u])
        {
            int cost = dist[u] + v[1];
            if(dist[v[0]] > cost)
            {
                dist[v[0]]=cost;
                pq.push({cost, v[0]});
            }
        }
    }
}

int main() {
    cin>>nodeCount>>edgeCount;
    int dist[nodeCount];
    vector<vector<int>>G[1005];
    for(int i=1; i<=nodeCount; i++)
    {
        dist[i]=INT_MAX/2;
    }
    for(int i=1; i<=edgeCount; i++)
    {
        int u,v,weight;
        cin>>u>>v>>weight;
        G[u].push_back({v,weight});
        G[v].push_back({u,weight});
    }
    dijkstra(0,G,dist);
    for(int i=0; i<=nodeCount; i++)
        cout << dist[i] <<endl;
    return 0;
}

problem - 3:
------------
#include <iostream>
#include <vector>
using namespace std;


void floydWarshall(vector<vector<int>>& graph) {
    int V = graph.size();

    int INT_MAX;
    vector<vector<int>> dist(V, vector<int>(V, INT_MAX));

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i == j) {
                dist[i][j] = 0;
            } else if (graph[i][j] != 0) {
                dist[i][j] = graph[i][j];
            }
        }
    }


    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }


    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cout << "Shortest path from " << i << " to " << j << ": " << dist[i][j] << endl;
        }
    }
}

int main() {

    vector<vector<int>> graph = {
        {0, 3, 0, 0, 0, 0},
        {0, 0, 8, 0, 0, 2},
        {0, 0, 0, 0, 0, 0},
        {0, 5, 10, 0, 0, 0},
        {0, 0, 2, 1, 0, 0},
        {0, 0, 0, 7, 4, 0}
    };

    floydWarshall(graph);

    return 0;
}

